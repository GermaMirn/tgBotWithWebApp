import asyncio
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import aiohttp
import os

router = Router()

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Å–µ—Ä–≤–∏—Å–∞ –≤ Docker —Å–µ—Ç–∏
BFF_URL = os.getenv("BFF_URL", "http://bff-service:8000/api")

async def register_chat_for_notifications(telegram_id: int, chat_id: int, username: str = "", full_name: str = ""):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ BFF"""
    try:
        async with aiohttp.ClientSession() as session:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ miniapp endpoint
            # –≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç chat_id
            miniapp_data = {
                "id": telegram_id,
                "username": username,
                "full_name": full_name,
                "chat_id": chat_id
            }

            async with session.post(f"{BFF_URL}/auth/miniapp", json=miniapp_data) as response:
                print(f"Miniapp registration response status: {response.status}")

                if response.status == 200:
                    response_data = await response.json()
                    print(f"Miniapp registration successful: {response_data}")
                    return True, response_data
                elif response.status == 502:
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å chat_id –Ω–∞–ø—Ä—è–º—É—é
                    try:
                        direct_response = await session.post(
                            f"{BFF_URL}/notification/register-chat",
                            params={"telegram_id": telegram_id, "chat_id": chat_id}
                        )
                        if direct_response.status == 200:
                            direct_data = await direct_response.json()
                            print(f"Direct chat_id registration successful: {direct_data}")
                            return True, direct_data
                        else:
                            error_text = await direct_response.text()
                            print(f"Direct registration failed: {direct_response.status}, Error: {error_text}")
                            return False, error_text
                    except Exception as direct_e:
                        print(f"Direct registration error: {direct_e}")
                        return False, str(direct_e)
                else:
                    error_text = await response.text()
                    print(f"Miniapp registration failed: {response.status}, Error: {error_text}")
                    return False, error_text

    except Exception as e:
        print(f"Error registering chat for notifications: {e}")
        import traceback
        traceback.print_exc()
        return False, str(e)

@router.message(Command(commands=["notification", "notifications"]))
async def handle_notification_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /notification –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user = message.from_user

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    success, response_data = await register_chat_for_notifications(
        telegram_id=user.id,
        chat_id=message.chat.id,
        username=user.username or "",
        full_name=f"{user.first_name} {user.last_name or ''}".strip()
    )

    if success:
        response_text = (
            "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n"
            "‚úÖ –í–∞—à —á–∞—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
            "üì± –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Mini App.\n\n"
            "üí° <i>–û—Ç–∫—Ä–æ–π—Ç–µ Mini App, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å.</i>"
        )

        await message.answer(
            response_text,
            parse_mode="HTML"
        )
    else:
        response_text = (
            "‚ùå <b>–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {response_data}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

        await message.answer(
            response_text,
            parse_mode="HTML"
        )

@router.message(Command(commands=["notifications_off", "stop_notifications"]))
async def handle_stop_notifications_command(message: types.Message):
  """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
  user = message.from_user

  try:
      async with aiohttp.ClientSession() as session:
          # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          async with session.get(f"{BFF_URL}/notification/users/{user.id}/settings") as response:
              if response.status == 200:
                  settings = await response.json()

                  # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –æ—Ç–∫–ª—é—á–∞—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                  update_data = {
                      "telegram_enabled": False
                  }

                  async with session.patch(
                      f"{BFF_URL}/notification/users/{user.id}/settings",
                      json=update_data
                  ) as update_response:
                      if update_response.status == 200:
                        response_text = (
                          "üîï <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã</b>\n\n"
                          "‚úÖ –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram.\n"
                          "üì± –í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Mini App."
                        )
                      else:
                        response_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
              else:
                  response_text = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

  except Exception as e:
    print(f"Error disabling notifications: {e}")
    response_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."

  await message.answer(response_text, parse_mode="HTML")
